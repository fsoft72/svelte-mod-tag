/* This file is autogenerated by liwe3-svelte */
/* eslint-disable @typescript-eslint/no-inferrable-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */

/*=== f2c_start __file ===*/

/*=== f2c_end __file ===*/

import { get, patch, post, delete_, type LiWEFetcherOptions } from '$liwe3/utils/fetcher';

/**
 * The call creates or updates a tag in the system
 * It is possible to pass the same tag with different `module` fields, and the `module` will be added to the existing modules.
 * This function returns the full `Tag` structure
 *
 * @param name - The tag name [req]
 * @param visible - If the tag is visible [opt]
 *
 * @return tag: Tag
 *
 */
export const tag_admin_add = async ( name: string, visible: boolean = true, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/tag/admin/add`, { name, visible }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start tag_admin_add ===*/

	/*=== f2c_end tag_admin_add ===*/

	return res.tag;
};

/**
 * List all tags in the system.
 * This function returns the full `Tag` structure
 *
 *
 * @return tags: Tag
 *
 */
export const tag_admin_list = async ( _options?: any ) => {
	const res = await post( `/api/tag/admin/list`, {}, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start tag_admin_list ===*/

	/*=== f2c_end tag_admin_list ===*/

	return res.tags;
};

/**
 * Updates a tag.
 * This function returns the full `Tag` structure
 * **NOTE**: at the moment it is not possible to change a tag name.
 *
 * @param id - Address ID [req]
 * @param name - Tag name [opt]
 * @param visible - If the tag is visible or not [opt]
 *
 * @return tag: Tag
 *
 */
export const tag_admin_update = async ( id: string, name?: string, visible?: boolean, _options?: LiWEFetcherOptions ) => {
	const res = await patch( `/api/tag/admin/update`, { id, name, visible }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start tag_admin_update ===*/

	/*=== f2c_end tag_admin_update ===*/

	return res.tag;
};

/**
 * The call modifies one or more fields.
 * This function returns the full `Tag` structure
 *
 * @param id - The address ID [req]
 * @param data - The field / value to patch [req]
 *
 * @return tag: Tag
 *
 */
export const tag_admin_fields = async ( id: string, data: any, _options?: LiWEFetcherOptions ) => {
	const res = await patch( `/api/tag/admin/fields`, { id, data }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start tag_admin_fields ===*/

	/*=== f2c_end tag_admin_fields ===*/

	return res.tag;
};

/**
 * Adds a new module to a tag in the system.
 *
 * @param id - Tag id for update [req]
 * @param module - The module to add [req]
 *
 * @return tag: Tag
 *
 */
export const tag_admin_module_add = async ( id: string, module: string, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/tag/admin/module/add`, { id, module }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start tag_admin_module_add ===*/

	/*=== f2c_end tag_admin_module_add ===*/

	return res.tag;
};

/**
 * Deletes a module from a tag.
 *
 * @param id - Tag id for update [req]
 * @param module - The module to add [req]
 *
 * @return tag: Tag
 *
 */
export const tag_admin_module_del = async ( id: string, module: string, _options?: LiWEFetcherOptions ) => {
	const res = await delete_( `/api/tag/admin/module/del`, { id, module }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start tag_admin_module_del ===*/

	/*=== f2c_end tag_admin_module_del ===*/

	return res.tag;
};

/**
 * The call returns a list of all available tag.
 * If `module` is specified, only tag belonging to that module will be returned.
 * This function returns a list of full `Tag` structures
 *
 * @param module - The name of the module to filter for [opt]
 *
 * @return tags: Tag
 *
 */
export const tag_list = async ( module?: string, _options?: LiWEFetcherOptions ) => {
	const res = await get( `/api/tag/list`, { module }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start tag_list ===*/

	/*=== f2c_end tag_list ===*/

	return res.tags;
};

/**
 * @param tags - List of tags to search [req]
 * @param module - Optional module [opt]
 *
 * @return objs: TagSearchResult
 *
 */
export const tag_search = async ( tags: string[], module?: string, _options?: LiWEFetcherOptions ) => {
	const res = await get( `/api/tag/search`, { tags, module }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start tag_search ===*/

	/*=== f2c_end tag_search ===*/

	return res.objs;
};
